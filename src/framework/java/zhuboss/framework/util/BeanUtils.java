package zhuboss.framework.util;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import org.apache.commons.beanutils.BeanUtilsBean;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.slf4j.Logger;import org.springframework.util.ReflectionUtils;/** *  * <dl> *    <dt><b>Title:</b></dt> *    <dd> *    	none *    </dd> *    <dt><b>Description:</b></dt> *    <dd> *    	<p>反射的Utils函数集合.扩展自Apache Commons BeanUtils, 提供侵犯隐私的反射能力. *    </dd> * </dl> * * @author tanks * @version 1.0, 2014-7-4 * @since sirius-commons * */@SuppressWarnings("all")public class BeanUtils extends org.apache.commons.beanutils.BeanUtils {	protected static Log logger = LogFactory.getLog(BeanUtils.class);	private BeanUtils() {	}	/**	 * 对象属性拷贝	 * @param dest	需要复制的对象	 * @param orig	复制源	 */	public static void copyProperties(Object dest, Object orig) {		try {			ClassUtil.converAllNullValueField(orig);			BeanUtilsBean.getInstance().copyProperties(dest, orig);		} catch (IllegalAccessException e) {			logger.error(e);		} catch (InvocationTargetException e) {			logger.error(e);		}	}	/**	 * 循环向上转型,获取对象的DeclaredField.	 *	 * @throws NoSuchFieldException 如果没有该Field时抛出.	 */	public static Field getDeclaredField(Object object, String propertyName) throws NoSuchFieldException {		return getDeclaredField(object.getClass(), propertyName);	}	/**	 * 循环向上转型,获取对象的DeclaredField.	 *	 * @throws NoSuchFieldException 如果没有该Field时抛出.	 */	public static Field getDeclaredField(Class clazz, String propertyName) throws NoSuchFieldException {		for (Class superClass = clazz; superClass != Object.class; superClass = superClass.getSuperclass()) {			try {				return superClass.getDeclaredField(propertyName);			} catch (NoSuchFieldException e) {				// Field不在当前类定义,继续向上转型			}		}		throw new NoSuchFieldException("No such field: " + clazz.getName() + '.' + propertyName);	}	/**	 * 暴力获取对象变量值,忽略private,protected修饰符的限制.	 *	 * @throws NoSuchFieldException 如果没有该Field时抛出.	 */	public static Object forceGetProperty(Object object, String propertyName) throws NoSuchFieldException {		Field field = getDeclaredField(object, propertyName);		boolean accessible = field.isAccessible();		field.setAccessible(true);		Object result = null;		try {			result = field.get(object);		} catch (IllegalAccessException e) {			logger.info("error wont' happen");		}		field.setAccessible(accessible);		return result;	}	/**	 * 暴力设置对象变量值,忽略private,protected修饰符的限制.	 *	 * @throws NoSuchFieldException 如果没有该Field时抛出.	 */	public static void forceSetProperty(Object object, String propertyName, Object newValue)			throws NoSuchFieldException {		Field field = getDeclaredField(object, propertyName);		boolean accessible = field.isAccessible();		field.setAccessible(true);		try {			field.set(object, newValue);		} catch (IllegalAccessException e) {			logger.info("Error won't happen");		}		field.setAccessible(accessible);	}	/**	 * 暴力调用对象函数,忽略private,protected修饰符的限制.	 *	 * @throws NoSuchMethodException 如果没有该Method时抛出.	 */	public static Object invokePrivateMethod(Object object, String methodName, Object[] params)			throws NoSuchMethodException {		Class[] types = new Class[params.length];		for (int i = 0; i < params.length; i++) {			types[i] = params[i].getClass();		}		Class clazz = object.getClass();		Method method = null;		for (Class superClass = clazz; superClass != Object.class; superClass = superClass.getSuperclass()) {			try {				method = superClass.getDeclaredMethod(methodName, types);				break;			} catch (NoSuchMethodException e) {				// 方法不在当前类定义,继续向上转型			}		}		if (method == null)			throw new NoSuchMethodException("No Such Method:" + clazz.getSimpleName() + methodName);		boolean accessible = method.isAccessible();		method.setAccessible(true);		Object result = null;		try {			result = method.invoke(object, params);		} catch (Exception e) {			ReflectionUtils.handleReflectionException(e);		}		method.setAccessible(accessible);		return result;	}	/**	 * 获得所有属性值内容	 * @param bean	 * @return	 * @throws NoSuchMethodException	 */	@SuppressWarnings("unchecked")	public static List getBeanValues(Object bean) throws NoSuchMethodException {		List propertyValues = new ArrayList();//		Field[] fields = bean.getClass().getFields();//		for(int i=0;i<fields.length;i++){//			try{//				Object value = fields[i].get(bean);//				propertyValues.add(value==null ? "":value);//			}catch(IllegalAccessException ex){//				//ignore//				propertyValues.add("");//			}//		}		Field[] fields = bean.getClass().getDeclaredFields();		for(int i=0;i<fields.length;i++){			propertyValues.add(fields[i].getName()+":"+ClassUtil.getFieldValueWithGetter(bean, fields[i]));		}		return propertyValues;	}	public static void logBeanValues(Object bean,Logger log){		try{			List propertyValues = new ArrayList();			Field[] fields = bean.getClass().getDeclaredFields();			log.info(bean.getClass().getName()+"：输入参数如下");			for(int i=0;i<fields.length;i++){				log.info(fields[i].getName()+":"+ClassUtil.getFieldValueWithGetter(bean, fields[i]));			}		}catch (Exception e) {			// TODO: handle exception		}	}}